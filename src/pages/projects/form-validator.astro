---
import MainLayout from "@/layouts/MainLayout.astro";
---

<MainLayout>
  <div class="flex items-center justify-center min-h-screen bg-gray-100">
    <form id="form" class="bg-white shadow-lg rounded-lg w-full max-w-md p-8">
      <h2 class="text-2xl font-semibold text-center mb-6">Register With Us</h2>

      <div class="mb-4 relative" data-field="username">
        <label for="username" class="block text-gray-700 mb-1">Username</label>
        <input
          id="username"
          type="text"
          placeholder="Enter username"
          class="w-full border border-gray-300 rounded p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <small class="text-red-500 text-sm mt-1 hidden">Error message</small>
      </div>

      <div class="mb-4 relative" data-field="email">
        <label for="email" class="block text-gray-700 mb-1">Email</label>
        <input
          id="email"
          type="email"
          placeholder="Enter email"
          class="w-full border border-gray-300 rounded p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <small class="text-red-500 text-sm mt-1 hidden">Error message</small>
      </div>

      <div class="mb-4 relative" data-field="password">
        <label for="password" class="block text-gray-700 mb-1">Password</label>
        <input
          id="password"
          type="password"
          placeholder="Enter password"
          class="w-full border border-gray-300 rounded p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <small class="text-red-500 text-sm mt-1 hidden">Error message</small>
      </div>

      <div class="mb-4 relative" data-field="password2">
        <label for="password2" class="block text-gray-700 mb-1">Confirm Password</label>
        <input
          id="password2"
          type="password"
          placeholder="Enter password again"
          class="w-full border border-gray-300 rounded p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <small class="text-red-500 text-sm mt-1 hidden">Error message</small>
      </div>

      <button
        type="submit"
        class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 rounded mt-6"
        >Submit</button
      >
    </form>
  </div>

  <script>
    const form = document.querySelector<HTMLFormElement>("#form");
    const username = document.querySelector<HTMLInputElement>("#username");
    const email = document.querySelector<HTMLInputElement>("#email");
    const password = document.querySelector<HTMLInputElement>("#password");
    const password2 = document.querySelector<HTMLInputElement>("#password2");

    function showError(input: HTMLInputElement, message: string): void {
      const wrapper = input.parentElement as HTMLElement | null;
      if (!wrapper) return;
      wrapper.classList.add("border-red-500");
      wrapper.classList.remove("border-green-500");
      const small = wrapper.querySelector("small") as HTMLElement | null;
      if (!small) return;
      small.textContent = message;
      small.classList.remove("hidden");
    }

    function showSuccess(input: HTMLInputElement): void {
      const wrapper = input.parentElement as HTMLElement | null;
      if (!wrapper) return;
      wrapper.classList.add("border-green-500");
      wrapper.classList.remove("border-red-500");
      const small = wrapper.querySelector("small") as HTMLElement | null;
      if (!small) return;
      small.classList.add("hidden");
    }

    function getFieldName(input: HTMLInputElement): string {
      return input.id.charAt(0).toUpperCase() + input.id.slice(1);
    }

    const Validators = {
      required(inputs: HTMLInputElement[]): boolean {
        let hasError = false;
        inputs.forEach((input) => {
          if (input.value.trim() === "") {
            showError(input, `${getFieldName(input)} is required`);
            hasError = true;
          } else {
            showSuccess(input);
          }
        });
        return hasError;
      },
      length(input: HTMLInputElement, min: number, max: number): void {
        if (input.value.length < min) {
          showError(input, `${getFieldName(input)} must be at least ${min} characters`);
        } else if (input.value.length > max) {
          showError(input, `${getFieldName(input)} must be less than ${max} characters`);
        } else {
          showSuccess(input);
        }
      },
      email(input: HTMLInputElement): void {
        const re =
          /^(([^<>()\[\]\\.,;:\s@\"]+(\.[^<>()\[\]\\.,;:\s@\"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        if (re.test(input.value.trim())) {
          showSuccess(input);
        } else {
          showError(input, "Email is not valid");
        }
      },
      passwordsMatch(input1: HTMLInputElement, input2: HTMLInputElement): void {
        if (input1.value !== input2.value) {
          showError(input2, "Passwords do not match");
        }
      },
    };

    form.addEventListener("submit", (e: Event) => {
      e.preventDefault();
      if (!Validators.required([username, email, password, password2])) {
        Validators.length(username, 3, 15);
        Validators.length(password, 6, 25);
        Validators.email(email);
        Validators.passwordsMatch(password, password2);
      }
    });
  </script>
</MainLayout>
